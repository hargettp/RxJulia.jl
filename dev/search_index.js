var documenterSearchIndex = {"docs":
[{"location":"#RxJulia-Guide-1","page":"RxJulia Guide","title":"RxJulia Guide","text":"","category":"section"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"This package is an implementation of the ReactiveX reactive programming model in Julia.","category":"page"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"Just like other libraries in the ReactiveX ecosystem, the basic Observable and Reactor types exist,  together with many operators for constructing new observables from existing ones.","category":"page"},{"location":"#Pipelines-1","page":"RxJulia Guide","title":"Pipelines","text":"","category":"section"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"One area that is unique to RxJulia is the use of macros to create pipelines or chains of Observable  instances in code. Specifically the @rx macro makes this possible. Each pipeline created with @rx is itself an Observable. When using @rx, a special observable, a Collector, is added to the end of the chain, resulting in an object suitable for iteration. Iteration ends when a CompletedEvent or an ErrorEvent are encountered. Thus, it is possible to iterate over the events generated from the created pipeline.","category":"page"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"events = @rx begin\n  observableFactory1\n  subjectFactory1\n  subjectFactory2\n  # more....\nend\n\nfor event in events\n  # do something with the event.\nend","category":"page"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"Note that intermediate stages in a pipeline are Reactors, capable of both being an Observer and an Observable. Both the beginning and the end of the pipeline should be an Observable (of course, another Reactor is fine too). A Reactor is the analogue of a Subject in the ReactiveX model.","category":"page"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"Actually, that's not entirely true: each statment inside the @rx block is actually an expression that should be a factory for creating an observer or reactor, and each line subscribes to the events generated by the line above it, with subscribe!.","category":"page"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"Depth = 3","category":"page"},{"location":"#Kernel-1","page":"RxJulia Guide","title":"Kernel","text":"","category":"section"},{"location":"#Functions-1","page":"RxJulia Guide","title":"Functions","text":"","category":"section"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"Modules = [RxJulia]\nPages = [\"kernel.jl\"]\nOrder = [:function]","category":"page"},{"location":"#RxJulia.dispatch-Tuple{Any}","page":"RxJulia Guide","title":"RxJulia.dispatch","text":"Return a Reactor around the provided function which takes Observers and an Event, taking action as appropriate, and producing anObservablethat can also be an [Observer](@ref) of otherObservable`s.\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.events","page":"RxJulia Guide","title":"RxJulia.events","text":"Return a Collector to accumulate observed Events\n\n\n\n\n\n","category":"function"},{"location":"#RxJulia.notify!-Tuple{Any,Any}","page":"RxJulia Guide","title":"RxJulia.notify!","text":"Notify Observer by invoking the block on each\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.onEvent-Tuple{Any,Any}","page":"RxJulia Guide","title":"RxJulia.onEvent","text":"Deliver an Event to the Observer\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.react-Tuple{Any}","page":"RxJulia Guide","title":"RxJulia.react","text":"Return a Reactor around the provided function which takes Observers and a value, taking action as appropriate, and producing an Observable that can also be an Observer of other Observables. CompletedEvents and ErrorEvents are passed on to Observers, while ValueEvents are passed to the supplied function. The supplied funciton takes Observers and a value as arguments.\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.subscribe!-Tuple{Any,Any}","page":"RxJulia Guide","title":"RxJulia.subscribe!","text":"Treat any value as an Observable, and subscribe the Observer to it; the value will be emitted once with a ValueEvent, then a CompletedEvent will be emitted.\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.subscribe!-Tuple{Array,Any}","page":"RxJulia Guide","title":"RxJulia.subscribe!","text":"Treat an Array as an Observable, emitting each of its elements in turn in a ValueEvent, and concluding with a CompletedEvent.\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.subscribe!-Tuple{Array{Observer,1},Any}","page":"RxJulia Guide","title":"RxJulia.subscribe!","text":"Add an Observer to an existing set of Observers\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.subscribe!-Tuple{Observable,Any}","page":"RxJulia Guide","title":"RxJulia.subscribe!","text":"Subscribe an Observer to the given Observable\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.chain!-Tuple{Any,Any}","page":"RxJulia Guide","title":"RxJulia.chain!","text":"Subscribe the Observer to the Observable, and return the Observable.\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.complete!-Tuple{Any}","page":"RxJulia Guide","title":"RxJulia.complete!","text":"Emit a CompletedEvent to Observers\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.error!-Tuple{Any,Any}","page":"RxJulia Guide","title":"RxJulia.error!","text":"Emit an ErrorEvent to Observers\n\n\n\n\n\n","category":"method"},{"location":"#Macros-1","page":"RxJulia Guide","title":"Macros","text":"","category":"section"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"Modules = [RxJulia]\nPages = [\"kernel.jl\"]\nOrder = [:macro]","category":"page"},{"location":"#RxJulia.@rx-Tuple{Any}","page":"RxJulia Guide","title":"RxJulia.@rx","text":"Given a do-block where each statement is an Observable,  subscribe! each in sequence to the one proceeding. Return an object that one can use to iterate over the events from the last Observable in the block.\n\nExample:\n\nresults = @rx() do\ncount\nfilter(:even)\nend\nfor evt in results\n# do something with evt\nend\n\n\n\n\n\n","category":"macro"},{"location":"#Types-1","page":"RxJulia Guide","title":"Types","text":"","category":"section"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"Modules = [RxJulia]\nPages = [\"kernel.jl\"]\nOrder = [:type]","category":"page"},{"location":"#RxJulia.Collector","page":"RxJulia Guide","title":"RxJulia.Collector","text":"An Observer that accumulates events on a Channel, which then may be retrieved for iteration\n\n\n\n\n\n","category":"type"},{"location":"#RxJulia.CompletedEvent","page":"RxJulia Guide","title":"RxJulia.CompletedEvent","text":"An Event signifying no more events are available from the originating Observable.\n\n\n\n\n\n","category":"type"},{"location":"#RxJulia.ErrorEvent","page":"RxJulia Guide","title":"RxJulia.ErrorEvent","text":"An Event signifying the originating Observable encountered an error; no more events will be delivered after events of tyie.\n\n\n\n\n\n","category":"type"},{"location":"#RxJulia.Observable","page":"RxJulia Guide","title":"RxJulia.Observable","text":"An Observable is a source of Events, with Observers  subscribe!ing to the Observable in order to receive those events. \n\nSee Observable in ReactiveX documentation\n\n\n\n\n\n","category":"type"},{"location":"#RxJulia.Observer","page":"RxJulia Guide","title":"RxJulia.Observer","text":"An Observer is a receiver of Events via onEvent\n\n\n\n\n\n","category":"type"},{"location":"#RxJulia.Reactor","page":"RxJulia Guide","title":"RxJulia.Reactor","text":"A Reactor is an Observer that is also useful for building Observers that are Observable as well.\n\nA Reactor is the analogue of a Subject in the ReactiveX model.\n\n\n\n\n\n","category":"type"},{"location":"#RxJulia.ValueEvent","page":"RxJulia Guide","title":"RxJulia.ValueEvent","text":"An Event containing a value to deliver to an Observable.\n\n\n\n\n\n","category":"type"},{"location":"#RxJulia.Observers","page":"RxJulia Guide","title":"RxJulia.Observers","text":"Observers is a collection of subscribed Observers\n\n\n\n\n\n","category":"type"},{"location":"#Constants-1","page":"RxJulia Guide","title":"Constants","text":"","category":"section"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"Modules = [RxJulia]\nPages = [\"kernel.jl\"]\nOrder = [:constant]","category":"page"},{"location":"#RxJulia.Event","page":"RxJulia Guide","title":"RxJulia.Event","text":"An Event is any of the following:\n\nA value, encapsulated as ValueEvent\nA completion event, encapsulated as CompletedEvent\nAn error, encapsulated as ErrorEvent\n\n\n\n\n\n","category":"constant"},{"location":"#Operators-1","page":"RxJulia Guide","title":"Operators","text":"","category":"section"},{"location":"#Functions-2","page":"RxJulia Guide","title":"Functions","text":"","category":"section"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"Modules = [RxJulia]\nPages = [\"operators.jl\"]\nOrder = [:function]","category":"page"},{"location":"#RxJulia.cut-Tuple{Any}","page":"RxJulia Guide","title":"RxJulia.cut","text":"Drop the last n events observed, emitting all others that precede them. If less than n  events observed, emit nothing.\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.distinct-Tuple{}","page":"RxJulia Guide","title":"RxJulia.distinct","text":"Only emit unique values observed\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.drop-Tuple{Any}","page":"RxJulia Guide","title":"RxJulia.drop","text":"Drop the first n events observed, emitting all others that precede them. If less than n  events observed, emit nothing.\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.keep-Tuple{Any}","page":"RxJulia Guide","title":"RxJulia.keep","text":"Keep only the last n values, discarding the rest. If less than n values observed, emit only values observed.\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.reject-Tuple{Any}","page":"RxJulia Guide","title":"RxJulia.reject","text":"Apply a filter function such that only values for which the function returns false will be passed onto Observers\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.select-Tuple{Any}","page":"RxJulia Guide","title":"RxJulia.select","text":"Apply a filter function such that only values for which the function returns true will be passed onto Observers\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.span-Tuple{Any,Any}","page":"RxJulia Guide","title":"RxJulia.span","text":"Emit only the integers in the range of m to n, inclusive\n\n\n\n\n\n","category":"method"},{"location":"#RxJulia.take-Tuple{Any}","page":"RxJulia Guide","title":"RxJulia.take","text":"Take only the first n values, discarding the rest. If less than n values observed, emit only values observed.\n\n\n\n\n\n","category":"method"},{"location":"#Macros-2","page":"RxJulia Guide","title":"Macros","text":"","category":"section"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"Modules = [RxJulia]\nPages = [\"operators.jl\"]\nOrder = [:macro]","category":"page"},{"location":"#Types-2","page":"RxJulia Guide","title":"Types","text":"","category":"section"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"Modules = [RxJulia]\nPages = [\"operators.jl\"]\nOrder = [:type]","category":"page"},{"location":"#Constants-2","page":"RxJulia Guide","title":"Constants","text":"","category":"section"},{"location":"#","page":"RxJulia Guide","title":"RxJulia Guide","text":"```@autodocs Modules = [RxJulia] Pages = [\"operators.jl\"] Order = [:constant]","category":"page"}]
}
